All the codes in this folder are written in Python 3 language. They should work on all operative systems, with a Python compiler.
The codes perform only numerical calculations, therefore we do not include any dataset to demo the code.
The expected run time is from few seconds up to few minutes.

DESCRIPTIONS OF THE CODES:

1) sync_tab.py

the code generates a table for a synchrotron spectrum emitted by a population of particles whose distribution is a power law. The table is saved as sync_tab.txt and it is used in other codes. So, it should be run before running other codes.
The code also plots the F_nu spectrum. The synchrotron spectrum is uniquely defined by three parameters (see Methods in the paper):
- nu_m
- nu_c
- p
The resulting spectrum is generated as a function of frequency nu, where nu is normalized to the min(nu_m,nu_c)

In the code, the adjustable variables are R and p and they are chosen in this way:
- in slow cooling regime (nu_c>nu_m), R=nu_c/nu_m and p_low=p
- in fast cooling regime (nu_c<nu_m), R=nu_m/nu_c and p_low=2

-----------------------------------------------------------------

2)ad_cool_sync.py

The code computes the alpha-F relation in case of adiabatic cooling, considering the integration along the EATS. The spectral shape is synchrotron. The code reads the file sync_tab.txt generated by the code sync_tab.py.
The adjustable variables are:
- nu_ch: it is min(nu_m, nu_c) in units of keV
- lam is lambda, the power law index of magnetic field decay
- f_r: 
	=4/3 if the shell thickness is constant in time
	=2 if it increases linearly with radius

theta_max and gamma are the aperture angle of the jet in radians and the bulk Lorentz factor, respectively. They can be changed, but they don't affect the final shape of the alpha-F relation.

The code plots photon index vs F_max/F for 0<lambda<2
-----------------------------------------------------------------

3)ad_int_spe.py

The code computes the alpha-F relation in case of adiabatic cooling, considering the integration along the EATS. The spectral shape can be chosen among SBPL or Band function, commenting the lines where indicated. The structure and the output is the same of ad_cool_sync.py.
The adjustable variables are:
- nu_p: it is the peak frequency in units of keV
- alpha: low energy photon index
- beta_s: high energy photon index
- lam is lambda, the power law index of magnetic field decay
- f_r: 
	=4/3 if the shell thickness is constant in time
	=2 if it increases linearly with radius
- exp_par: it is set to 0 by default. It is set to 1 to introduce an exponential cutoff in the SBPL. 

theta_max and gamma are the aperture angle of the jet in radians and the bulk Lorentz factor, respectively. They can be changed, but they don't affect the final shape of the alpha-F relation.

The code plots photon index vs F_max/F for 0<lambda<2
-----------------------------------------------------------------

4)ad_int_time.py

The code computes the light curve shifted at 100 seconds and normalized to the peak flux. The time in x axis is in the observer frame. The formalism is the same of ad_int_spe.py.
The adjustable variables are:
- nu_p: it is the peak frequency in units of keV
- alpha: low energy photon index
- beta_s: high energy photon index
- lam is lambda, the power law index of magnetic field decay
- f_r: 
	=4/3 if the shell thickness is constant in time
	=2 if it increases linearly with radius
- R0 and gamma: they define the adiabatic timescale tau_ad=R0/2*c*gamma^2
-----------------------------------------------------------------



5) HLE.py

The code computes the alpha-F relation in case of HLE from an infinitesimal duration pulse. The flux evolution is computed according to eq. (1) in the paper

The adjustable variables are:
- nu_p: it is the peak frequency in units of keV
- alpha: low energy photon index
- beta_s: high energy photon index
-----------------------------------------------------------------

6)HLE_acc_spe.py

The code computes the alpha-F relation in case of HLE from a finite duration pulse, including acceleration of the shell and evolution of the magnetic field. The formalism is described in the Supplementary Notes,

The adjustable variables are:
- nu_p: it is the peak frequency in units of keV
- alpha: low energy photon index
- beta_s: high energy photon index
- gamma_0: Lorentz factor at R=R_in
- R_in: Radius at which the shell switches on
- R_off: Radius at which the shell switches off
- k: acceleration parameter of the shell. Given the formalism used, this method works only for -0.5<k<0.5
- lam: decay parameter of the magnetic field
-----------------------------------------------------------------

6)HLE_acc_time.py

The code computes the light curve shifted at 100 s in case of HLE from a finite duration pulse, including acceleration of the shell and evolution of the magnetic field. The time in x axis is in the observer frame. The formalism is described in the Supplementary Notes,

The adjustable variables are:
- nu_p: it is the peak frequency in units of keV
- alpha: low energy photon index
- beta_s: high energy photon index
- gamma_0: Lorentz factor at R=R_in
- R_in: Radius at which the shell switches on
- R_off: Radius at which the shell switches off
- k: acceleration parameter of the shell. Given the formalism used, this method works only for -0.5<k<0.5
- lam: decay parameter of the magnetic field
-----------------------------------------------------------------

7)transport_eq.py

The code solves numerically the transport equation mentioned in the last section of Supplementary Notes. The injection term is a power law between a min gamma gamma_min and a max gamma gamma_max. The slope of the injected distribution is p. 
The adjustable variables are:
- p: slope of the injected distribution (N \propto gamma^(-p))
- gamma_min: min gamma of the injected distribution
- gamma_max: max gamma of the injected distribution
- k: regulates the power of synchrotron cooling. It is defined such that \dot{gamma}=-k*(1+t/t0)**(-2*lam)
- t0 dynamical timescale of the system
- alfa: it's =1 when adiabatic cooling is active, it's =0 when it's excluded
- lam: decay index of magnetic field
- y: decay index of the injection term
- t_inj: time at which injection starts to decline
- jmax: number of temporal steps. Since the time step is 1 sec, jmax corresponds to the total evolution time.

In the code h indicates the log spacing for gamma and dt is the length of the single temporal step. The code works correctly if h/dt>1/(ln(10))*max(k*gamma_max,2/3t0).

The code generates a plot with the particle distribution at several time steps, indicated with different colors. The particle distribution at each time step is saved in a .txt file that will be read by the sync_evo.py code.

8)sync_evo.py

The code takes as input the .txt files created by the code transport_eq.py and computes the synchrotron emission associated to the particle distribution at each time step. 
If the transport_eq.py code generated several files up to "N_evo_*.txt", then modify in sync_evo.py the variable m_max=*.
The spectrum is plotted as a function of frequency, in arbitrary units.












